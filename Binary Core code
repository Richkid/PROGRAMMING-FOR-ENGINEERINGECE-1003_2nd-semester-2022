#include <iostream>
#include <math.h>
#include <iomanip>

using namespace std;

//Creating object binary
class binary
{
    public: binary();
            int Add();
            int Sub();
            int multi();
            int input();
    private : int rem,i;
              unsigned int a,b;
};


int decimal(unsigned int);//Binary to Decimal Function declaration
int octal(unsigned int);//Decimal to Octal Function declaration
long long Binary(int);// Decimal to Binary Function declaration
void Hexa(int n);// Decimal to Hexadecimal Function declaration

//Main Function(code test)
int main()
{
 binary A;
 A.multi();

}

binary::binary()//Constructor definition
{
    int rem = i = 1;

}

int binary::input()//input definition
{
        cout<<"Please enter a binary number: ";
        cin>>a;
        cout<<"Please enter another binary number: ";
        cin>>b;
        return 0;
}

int binary::Add()//Add Function definition
{
    int temp1, temp2,bin, add;
    input();//Accepts user inputs

    temp1 = decimal(a);//Temporary storage for first binary number converted to decimal
    temp2 = decimal(b);//Temporary storage for second binary number converted to decimal


        add = temp1 + temp2;//Adding two decimal numbers
        bin = Binary(add);//Converting result to binary

        cout << "Sum of " << a << " & " << b << " is:\n\t\t" << bin<<" which is "<<add<<endl;//Output binary
        return bin;
    }



//Subtraction Function definition
int binary::Sub()
{
    int temp1, temp2, bin, sub;
   input();
    temp1 = decimal(a);
    temp2 = decimal(b);
    //Ensuring no negative numbers
    if (temp1 < temp2)
        cout << "Invalid Input.....";
    else
    {
        sub = temp1 - temp2;
        bin = Binary(sub);

        cout << "DIFFERENCE of " << a << " & " << b<< " is:\n\t\t" << bin<<" which is "<<sub<<endl;
    }
    return bin;
}

//Multiplication Function definition
int binary::multi()
{
  input();
   int temp1, temp2,temp3,temp4,bin, prod;

    temp1 = decimal(a);
    temp2 = decimal(b);
    temp3 = octal(temp1);//Octal conversion test




        prod = temp1 * temp2;
        bin = Binary(prod);

        cout << "Product of " << a << " & " << b << " is:\n\t\t" << bin<<" which is "<<prod<<" also "<<temp3<<" and ";
        Hexa(temp1);//Hexadecimal conversion test

        return bin;

}

//Converting Binary to Decimal Function
int decimal(unsigned int num)
{
    int rem, decimal = 0, i = 0;
    while (num > 0)
    {
        rem = num % 10;
        decimal = decimal + (rem*  pow(2, i));
        i++;
        num /= 10;
    }
    return decimal;
}

//Converting Decimal to Octal Function
int octal(unsigned int num)
{
   int rem, octal=0,i=1;
   while (num != 0)
    {
     octal += (num % 8)*i;
     num /= 8;
     i*=10;//i=i*10
    }
    return octal;

}

//Converting Decimal to Binary Function
long long Binary(int num)
{
    int rem;
    long long binary = 0, i = 1;
    do
    {
        rem = num % 2;
        binary = binary + (i*rem);
        num = num / 2;
        i = i * 10;
    } while (num>0);
    return binary;
}

//Converting Decimal to Hexadecimal Function
void Hexa(int n)
{
    // char array to store hexadecimal number
    char hexaDeciNum[100];

    // counter for hexadecimal number array
    int i = 0;
    while (n != 0) {
        // temporary variable to store remainder
        int temp = 0;

        // storing remainder in temp variable.
        temp = n % 16;

        // check if temp < 10
        if (temp < 10) {
            hexaDeciNum[i] = temp + 48;
            i++;
        }
        else {
            hexaDeciNum[i] = temp + 55;
            i++;
        }

        n = n / 16;
    }

    // printing hexadecimal number array in reverse order
    for (int j = i - 1; j >= 0; j--)
        cout << hexaDeciNum[j];
}

